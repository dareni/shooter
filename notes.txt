The server holds the position and direction of all players.
When a client connects to the server:
  the server gives a position and direction for its player in MultiPlayerMessage::Connect.
  the client receives the position and direction for all the player characters connected to the server from MultiPlayerMessage::Connect.

Player is controlled by the keyboard and mouse for the client. Player movements are sent to the server in MultiPlayerMessage::Move for distribution to other clients. Player movements are translated to the camera on the client. Player character movement data is received from the server in MultiPlayerMessage::Move and the entity representing the player is modified.

Multiplayer Connect
-------------------
Connections are initiated from the menu mod.
The Multiplayer menu option maps to a window dependent on MultiplayerState:
 - MultiplayerState::Connected -> MenuItem::Players -> Players Window
 - MultiplayerState::Disconnected -> MenuItem::Servers -> Servers Window

Connect button on Servers window ->
 - Creates a new RenetClient and initiates a server connection,
 - Inserts resources RenetClient, MultiplayerMessageSender, MultiplayerMessageReceiver into bevy.
 - Sets MultiplayerState::Connecting.

At this point the client needs to poll the network socket for the server reply.

System client::set_connected runs on entering state MultiplayerState::Connecting and sets Multiplayer::Connected
allowing client::do_multiplayer_server to complete the connection to the server, System do_multiplayer_server runs while in state MultiplayerState::Connected.

System players::connect_first_)person runs on entering state MultiplayerState::Connected and sets the client id of the FirstPerson entity. 

System update_world_from_server_messages runs while the MultiplayerMessageReceiver resource exists.

Multiplayer Disconnect
----------------------
Disconnect button on Players window -> sets MultiplayerState::Predisconnecting.

System client::do_multiplayer_disconnect runs on_enter MultiplayerState::Predisconnecting and calls RenetClient.disconnect() which
sends a disconnect packet to the server.

System client::do_finish_disconnect runs on MultiplayerState::Predisconnecting & MultiplayerState::Disconnecting if the RenetClient resource exists.  If the RenetClient is disconnected it is removed from bevy along with MultiplayerMessageSender, MultiplayerMessageReceiver.

System menu::set_disconnected runs if resource RenetClient is removed and sets MultiplayerState::Disconnected.

System player::update_world_from_server_messages receives MultiplayerMessage::Disconnect for itself, sent by system client::do_multiplayer_server, when the renet client is disconnected from the server(eg a timeout) and call System client:: do_finish_disconnect().

